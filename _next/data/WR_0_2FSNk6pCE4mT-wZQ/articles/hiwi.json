{"pageProps":{"code":"var Component=(()=>{var l=Object.create;var r=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var g=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),m=(e,n)=>{for(var i in n)r(e,i,{get:n[i],enumerable:!0})},c=(e,n,i,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let s of p(n))!w.call(e,s)&&s!==i&&r(e,s,{get:()=>n[s],enumerable:!(a=d(n,s))||a.enumerable});return e};var f=(e,n,i)=>(i=e!=null?l(u(e)):{},c(n||!e||!e.__esModule?r(i,\"default\",{value:e,enumerable:!0}):i,e)),y=e=>c(r({},\"__esModule\",{value:!0}),e);var o=g((_,h)=>{h.exports=_jsx_runtime});var j={};m(j,{default:()=>x,frontmatter:()=>b});var t=f(o()),b={title:\"Desing and implementation of a full stack web application (Flask, Python, HTML5) to interact with DL process analytics models.\",abstract:\"Machine learning models for anomaly detection at the university were only python code accessible by the terminal. I developed a full stack web interface to easily interact with them and showcase the result to non-technical stackeholders.\",date:\"2020-02-01\",featured:!1,banner:null};function k(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,{})})):i();function i(){let a=Object.assign({p:\"p\",a:\"a\",img:\"img\"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:[\"I worked for one year at the university as a research assistant. At the \",(0,t.jsx)(a.a,{href:\"https://www.is.rw.fau.eu\",children:\"chair of digital industrial service systems.\"})]}),(0,t.jsx)(a.p,{children:(0,t.jsx)(a.img,{alt:\"Hiwi\",src:\"/static/hiwi0.png\",width:\"2762\",height:\"2034\"})}),(0,t.jsx)(a.p,{children:\"The guys on my team were researching ML/DL approaches to process analytics. One project dealt with different deep learning architectures to predict upcoming events.\"}),(0,t.jsx)(a.p,{children:\"The interaction with the engine was done using the terminal, and all the parameters to run experiments were hardcoded in configuration files.\"}),(0,t.jsx)(a.p,{children:\"My task was to create a full-stack system to interact with the engine and showcase the results in a friendly, interactive way.\"}),(0,t.jsx)(a.p,{children:(0,t.jsx)(a.img,{alt:\"System\",src:\"/static/hiwi.png\",width:\"3840\",height:\"2400\"})}),(0,t.jsx)(a.p,{children:\"With the web UI, the user could easily select the parameters to run the engine and tests.\"}),(0,t.jsx)(a.p,{children:\"Using REST, the CSV with data was uploaded to the backend and using WebSockets, the engine sent back the logs and results to the UI.\"}),(0,t.jsxs)(a.p,{children:[\"The results of the training were plotted into charts using \",(0,t.jsx)(a.a,{href:\"https://www.chartjs.org\",children:\"Chart.JS\"})]})]})}}var x=k;return y(j);})();\n;return Component;","frontmatter":{"title":"Desing and implementation of a full stack web application (Flask, Python, HTML5) to interact with DL process analytics models.","abstract":"Machine learning models for anomaly detection at the university were only python code accessible by the terminal. I developed a full stack web interface to easily interact with them and showcase the result to non-technical stackeholders.","date":"2020-02-01","featured":false,"banner":null},"timecode":"00:00:42:89","ogImage":"https://hugoib.github.io//og/c9a9748aa089c93d1878098d7d849557.png"},"__N_SSG":true}